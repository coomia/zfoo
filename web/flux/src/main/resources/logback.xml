<?xml version="1.0" encoding="UTF-8"?>

<configuration scan="false" debug="false">

    <contextName>com.zfoo.flux</contextName>

    <property name="LOG_HOME" value="log/flux"/>
    <property name="PATTERN_FILE"
              value="%d{yyyy-MM-dd HH:mm:ss} [%5level] [%thread] %logger.%M\\(%F:%line\\) - %msg%n"/>
    <property name="PATTERN_CONSOLE"
              value="%d{yyyy-MM-dd HH:mm:ss} [%highlight(%5level)] [%thread] %logger.%M\\(%F:%line\\) - %msg%n"/>
    <!-- 负责写日志,控制台日志，会打印所有的包的所有级别日志 -->
    <appender name="zfoo_console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${PATTERN_CONSOLE}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- debug日志，只有一个文件，只收集debug级别日志，每次启动会覆盖以前的debug日志 -->
    <appender name="zfoo_debug" class="ch.qos.logback.core.FileAppender">
        <file>${LOG_HOME}/debug.log</file>
        <!-- append: true,日志被追加到文件结尾; false,清空现存文件;默认是true -->
        <append>false</append>
        <encoder>
            <pattern>${PATTERN_FILE}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>debug</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- info，warn，error级别的日志都会添加在info.log日志中 -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="zfoo_info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/info.log</file>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- rollover daily -->
            <fileNamePattern>info.%d{yyyy-MM-dd}.%i.txt</fileNamePattern>
            <!-- each file should be at most 100MB, keep 30 days worth of history, but at most 40GB -->
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>40GB</totalSizeCap>
        </rollingPolicy>

        <encoder>
            <Pattern>${PATTERN_FILE}</Pattern>
            <charset>UTF-8</charset>
        </encoder>

        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>info</level>
        </filter>
    </appender>

    <!-- 只收集error级别的日志 -->
    <appender name="zfoo_error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/error.log</file>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>error.%d{yyyy-MM-dd}.%i.txt</fileNamePattern>
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>

        <encoder>
            <Pattern>${PATTERN_FILE}</Pattern>
            <charset>UTF-8</charset>
        </encoder>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 异步输出 -->
    <appender name="zfoo_async" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="zfoo_error"/>
    </appender>

    <!--
    - 1.将级别为“INFO”及大于“INFO”的日志信息交给此logger指定的名为“STDOUT”的appender处理，在控制台中打出日志
    - 2.level：设置打印级别（TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF）。如果未设置此属性，那么当前logger将会继承上级的级别。
    - 3.additivity：为false，表示此logger的打印信息不再向上级root传递,如果设置为true，会打印两次
    - 4.appender-ref：指定了名字为"STDOUT"的appender。
    -->
    <logger name="com.zfoo.flux" level="DEBUG" additivity="false">
        <appender-ref ref="zfoo_console"/>
        <appender-ref ref="zfoo_debug"/>
        <appender-ref ref="zfoo_info"/>
        <!--ASYNC的appender指向ERROR，所以erro.log里的记录会打印两次-->
        <!--<appender-ref ref="zfoo_error"/>-->
        <appender-ref ref="zfoo_async"/>
    </logger>

    <!-- 根logger -->
    <root level="info">
        <appender-ref ref="zfoo_console"/>
        <appender-ref ref="zfoo_info"/>
    </root>

    <!--
    - 1.name：包名或类名，用来指定受此logger约束的某一个包或者具体的某一个类
    - 2.未设置打印级别，所以继承他的上级<root>的日志级别“DEBUG”
    - 3.未设置additivity，默认为true，将此logger的打印信息向上级传递；
    - 4.未设置appender，此logger本身不打印任何信息，级别为“DEBUG”及大于“DEBUG”的日志信息传递给root，
    -  root接到下级传递的信息，交给已经配置好的名为“STDOUT”的appender处理，“STDOUT”appender将信息打印到控制台；
    -->
    <logger name="ch.qos.logback"/>

    <!--*******************************************Spring********************************************************-->
    <!--logger中的name是指代码的包名或类名，路径要写全，可以配置不同包中的日志输出到不同的文件中。level是日志输出级别 -->
    <!--过滤掉spring的一些无用的DEBUG信息-->
    <logger name="org.springframework" level="warn"/>
    <!-- additivity="false"表示不继承父logger的配置和父类没有关系-->
    <logger name="org.springframework.core" level="warn"/>

    <!--*******************************************Hibernate*****************************************************-->
    <logger name="org.hibernate.ps" level="warn"/>
    <!-- Changing the log level to DEBUG will result in Hibernate generated SQL to be logged. -->
    <logger name="org.hibernate.SQL" level="debug"/>
    <logger name="org.springframework.core" level="warn"/>
    <logger name="org.springframework.core" level="warn"/>

    <!--*******************************************Netty*********************************************************-->
    <logger name="io.netty" level="warn"/>
</configuration>