<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>www.zfoo.com</groupId>
    <artifactId>web</artifactId>
    <version>1.0</version>


    <modules>
        <module>news</module>
        <module>wtest</module>
    </modules>

    <properties>
        <file.encoding>UTF-8</file.encoding><!-- 编码格式 -->
        <project.build.sourceEncoding>${file.encoding}</project.build.sourceEncoding><!-- 文件拷贝时的编码 -->
        <project.reporting.outputEncoding>${file.encoding}</project.reporting.outputEncoding><!-- 输出的编码 -->
        <maven.compiler.encoding>${file.encoding}</maven.compiler.encoding><!-- 编译时的编码 -->
        <maven.compiler.plugin.version>3.5</maven.compiler.plugin.version><!-- 用于编译java代码 -->
        <maven.resources.plugin.version>3.0.0</maven.resources.plugin.version><!-- 用于自定义拷贝资源文件 -->
        <maven.surefire.plugin.version>2.20</maven.surefire.plugin.version><!-- 用于测试 -->
        <maven.shade.plugin.version>3.0.0</maven.shade.plugin.version><!-- 用于打包 -->
        <build.helper.maven.plugin.version>3.0.0</build.helper.maven.plugin.version><!-- 用于添加override文件，覆盖别的包 -->
        <exec.maven.plugin.version>1.5.0</exec.maven.plugin.version><!-- 用于批量运行java main方法 -->


        <java.version>1.8</java.version>

        <commons-codec.version>1.9</commons-codec.version>
        <commons-dbcp.version>1.4</commons-dbcp.version>
        <commons-io.version>2.5</commons-io.version>
        <commons-collections.version>3.2.2</commons-collections.version>
        <commons-lang.version>3.6</commons-lang.version>
        <commons-fileupload.version>1.2.1</commons-fileupload.version>

        <zookeeper.version>3.4.10</zookeeper.version>
        <curator-framework.version>4.0.0</curator-framework.version>
        <curator-recipes.version>4.0.0</curator-recipes.version>

        <google.guava.version>22.0</google.guava.version>

        <spring.version>4.2.2.RELEASE</spring.version>
        <testng.version>6.8.7</testng.version>

        <jackson.version>1.9.13</jackson.version>

        <javassist.version>3.12.1.GA</javassist.version>

        <netty.version>4.1.6.Final</netty.version>

        <jdom.version>1.1</jdom.version>

        <poi.version>3.10-FINAL</poi.version>

        <mysql.version>5.1.29</mysql.version>
        <spring.orm.version>4.2.2.RELEASE</spring.orm.version>
        <hibernate.version>3.6.10.Final</hibernate.version>
        <hibernate.entitymanager.version>3.6.10.Final</hibernate.entitymanager.version>

        <jstl.version>1.2</jstl.version>
        <servlet-api.version>3.1.0</servlet-api.version>

        <slf4j.version>1.7.25</slf4j.version>
        <log4j.version>1.2.17</log4j.version>

        <zfoo.event.version>1.0</zfoo.event.version>
        <zfoo.hotswap.version>1.0</zfoo.hotswap.version>
        <zfoo.net.version>1.0</zfoo.net.version>
        <zfoo.orm.version>1.0</zfoo.orm.version>
        <zfoo.scheduler.version>1.0</zfoo.scheduler.version>
        <zfoo.storage.version>1.0</zfoo.storage.version>
        <zfoo.util.version>1.0</zfoo.util.version>
        <zfoo.web.version>1.0</zfoo.web.version>
    </properties>


    <dependencies>

        <dependency>
            <groupId>www.zfoo.com</groupId>
            <artifactId>event</artifactId>
            <version>${zfoo.event.version}</version>
        </dependency>

        <dependency>
            <groupId>www.zfoo.com</groupId>
            <artifactId>hotswap</artifactId>
            <version>${zfoo.hotswap.version}</version>
        </dependency>

        <dependency>
            <groupId>www.zfoo.com</groupId>
            <artifactId>net</artifactId>
            <version>${zfoo.net.version}</version>
        </dependency>

        <dependency>
            <groupId>www.zfoo.com</groupId>
            <artifactId>orm</artifactId>
            <version>${zfoo.orm.version}</version>
        </dependency>

        <dependency>
            <groupId>www.zfoo.com</groupId>
            <artifactId>scheduler</artifactId>
            <version>${zfoo.scheduler.version}</version>
        </dependency>

        <dependency>
            <groupId>www.zfoo.com</groupId>
            <artifactId>storage</artifactId>
            <version>${zfoo.storage.version}</version>
        </dependency>

        <dependency>
            <groupId>www.zfoo.com</groupId>
            <artifactId>util</artifactId>
            <version>${zfoo.util.version}</version>
        </dependency>

        <!-- 依赖的Spring模块类库 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!--JSP标准标签库(JSTL)是一个JSP标签集合,它封装了JSP应用的通用核心功能-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>${jstl.version}</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>${servlet-api.version}</version>
        </dependency>


        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>${commons-fileupload.version}</version>
        </dependency>

        <!-- 依赖的日志系统，使用Log4j+SLF4J -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j.version}</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j.version}</version>
        </dependency>


        <!-- 依赖的测试库 -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>


    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${file.encoding}</encoding>
                </configuration>
            </plugin>


            <!-- 指定编码格式，否则在DOS下运行mvn命令时当发生文件资源copy时将使用系统默认使用GBK编码
            Maven区别对待Java代码文件和资源文件，maven-compiler-plugin用来编译Java代码，
            maven-resources-plugin则用来处理资源文件。默认的主资源文件目录是src/main/resources，
            很多用户会需要添加额外的资源文件目录，这个时候就可以通过配置maven-resources-plugin来实现。-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven.resources.plugin.version}</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <!-- package阶段就执行resources插件的copy-resources目标 -->
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <encoding>${file.encoding}</encoding>
                            <!-- 指定resources插件处理资源文件到哪个目录下 -->
                            <outputDirectory>${project.build.directory}/resource</outputDirectory>
                            <!-- 也可以用下面这样的方式（指定相对url的方式指定outputDirectory） <outputDirectory>target/classes</outputDirectory> -->
                            <!-- 待处理的资源定义 -->
                            <resources>
                                <resource>
                                    <!-- 指定resources插件处理哪个目录下的资源文件 -->
                                    <directory>src/main/resources/</directory>
                                    <!-- 指定不需要处理的资源 <excludes> <exclude>WEB-INF/*.*</exclude> </excludes> -->
                                    <!-- 是否对待处理的资源开启过滤模式 (resources插件的copy-resources目标也有资源过滤的功能，这里配置的
                                    这个功能的效果跟<build><resources><resource>下配置的资源过滤是一样的，只不过可能执行的阶段不一样，
                                    这里执行的阶段是插件指定的validate阶段，<build><resources><resource>下的配置将是在resources插件的resources目标执行时起作用（在process-resources阶段）) -->
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <!-- forkMode 可设置值有 “never”， “once”， “always” 和 “pertest”。
            pretest： 每一个测试创建一个新进程，为每个测试创建新的JVM是单独测试的最彻底方式，但也是最慢的，不适合hudson上持续回归。
            once：在一个进程中进行所有测试。once为默认设置，在Hudson上持续回归时建议使用默认设置。
            always：在一个进程中并行的运行脚本，Junit4.7以上版本才可以使用，surefire的版本要在2.6以上提供这个功能
            threadCount：执行时，指定可分配的线程数量。 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire.plugin.version}</version>
                <configuration>
                    <forkMode>once</forkMode>
                    <threadCount>10</threadCount>
                    <argLine>-Dfile.encoding=UTF-8</argLine><!--argLine传入JVM选项-->
                    <!--<skipTests>true</skipTests>-->
                </configuration>
            </plugin>


            <!-- 配置完成后，执行mvn package即可打包。在target目录下会生成两个jar包，注意不是original-xxx.jar文件，而是另外一个。
            和maven-assembly-plugin一样，生成的jar文件包含了所有依赖，所以可以直接运行。
            如果项目中用到了Spring Framework，将依赖打到一个jar包中，运行时会出现读取XML schema文件出错。
            原因是Spring Framework的多个jar包中包含相同的文件spring.handlers和spring.schemas，如果生成一个jar包会互相覆盖。
            为了避免互相影响，可以使用AppendingTransformer来对文件内容追加合并 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven.shade.plugin.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <transformers>
                        <transformer
                                implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <!--<mainClass>com.xxg.Main</mainClass>-->
                        </transformer>
                        <transformer
                                implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                            <resource>META-INF/spring.handlers</resource>
                        </transformer>
                        <transformer
                                implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                            <resource>META-INF/spring.schemas</resource>
                        </transformer>
                    </transformers>
                </configuration>
            </plugin>


            <!-- Maven默认只允许指定一个主Java代码目录和一个测试Java代码目录，虽然这其实是个应当尽量遵守的约定，
            但偶尔你还是会希望能够指定多个源码目录（例如为了应对遗留项目），build-helper-maven-plugin的add-source目标就是服务于这个目的，
            通常它被绑定到默认生命周期的generate-sources阶段以添加额外的源码目录。
            需要强调的是，这种做法还是不推荐的，因为它破坏了Maven的约定，而且可能会遇到其他严格遵守约定的插件工具无法正确识别额外的源码目录。 -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>${build.helper.maven.plugin.version}</version>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/override</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <!-- 顾名思义，它能让你运行任何本地的系统程序，在某些特定情况下，运行一个Maven外部的程序可能就是最简单的问题解决方案，
            这就是exec:exec的用途，当然，该插件还允许你配置相关的程序运行参数。除了exec目标之外，
            exec-maven-plugin还提供了一个java目标，该目标要求你提供一个mainClass参数，然后它能够利用当前项目的依赖作为classpath，
            在同一个JVM中运行该mainClass。有时候，为了简单的演示一个命令行Java程序，
            你可以在POM中配置好exec-maven-plugin的相关运行参数，然后直接在命令运行 mvn exec:java 以查看运行效果。 -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${exec.maven.plugin.version}</version>
                <executions>
                    <execution>
                        <phase>test</phase>
                        <!--运行前先编译代码，exec：java不会自动编译代码，你需要手动执行mvn compile来完成编译-->
                        <goals>
                            <goal>java</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <skip>true</skip>
                    <includePluginDependencies>true</includePluginDependencies>
                    <mainClass>XXXXXX</mainClass>
                    <arguments>
                        <argument>arg0</argument>
                        <argument>arg1</argument>
                    </arguments>
                </configuration>
            </plugin>
        </plugins>

    </build>
</project>