<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>


    <groupId>com.zfoo</groupId>
    <artifactId>zfoo</artifactId>
    <version>2.0</version>

    <packaging>pom</packaging>

    <description>The root project of zfoo</description>
    <url>https://github.com/jaysunxiao/zfoo</url>
    <inceptionYear>2016</inceptionYear>

    <organization>
        <name>The ZFOO company</name>
        <url>https://www.zfoo.com</url>
    </organization>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0</url>
            <distribution>repo</distribution>
        </license>
    </licenses>


    <!-- 没有用<dependencyManagement>来管理这个root，是为了让下面的module不依赖于任何parent，复制出来就可以用 -->
    <!-- 聚合，把下面的几个module一起打包，packaging必须为pom -->
    <modules>
        <module>event</module>
        <module>hotswap</module>
        <module>net</module>
        <module>scheduler</module>
        <module>storage</module>
        <module>util</module>
        <module>web</module>
        <module>zplugin</module>
        <module>ztest</module>
    </modules>


    <properties>
        <!-- 本项目的其它module版本号 -->
        <zfoo.event.version>2.0</zfoo.event.version>
        <zfoo.hotswap.version>2.0</zfoo.hotswap.version>
        <zfoo.net.version>2.0</zfoo.net.version>
        <zfoo.scheduler.version>2.0</zfoo.scheduler.version>
        <zfoo.storage.version>2.0</zfoo.storage.version>
        <zfoo.util.version>2.0</zfoo.util.version>
        <zfoo.zplugin.version>2.0</zfoo.zplugin.version>

        <!-- 核心spring框架 -->
        <spring.version>5.1.5.RELEASE</spring.version>

        <!-- 工具包 -->
        <commons-codec.version>1.12</commons-codec.version>
        <commons-dbcp.version>2.6.0</commons-dbcp.version>
        <commons-io.version>2.6</commons-io.version>
        <commons-collections.version>3.2.2</commons-collections.version>
        <commons-lang.version>3.8.1</commons-lang.version>
        <commons-fileupload.version>1.4</commons-fileupload.version>
        <google.guava.version>27.0.1-jre</google.guava.version>

        <!-- json和xml解析包 -->
        <jackson.version>2.9.8</jackson.version>
        <!-- office文档解析包 -->
        <poi.version>4.0.1</poi.version>
        <!-- 字节码增强 -->
        <javassist.version>3.24.1-GA</javassist.version>

        <!-- 异步http -->
        <async-http-client.version>2.7.0</async-http-client.version>
        <jstl.version>1.2</jstl.version>
        <servlet-api.version>4.0.1</servlet-api.version>

        <!-- 网络通讯框架 -->
        <netty.version>4.1.33.Final</netty.version>

        <!-- 分布式zookeeper核心依赖包 -->
        <zookeeper.version>3.4.13</zookeeper.version>
        <curator-framework.version>4.1.0</curator-framework.version>
        <curator-recipes.version>4.1.0</curator-recipes.version>

        <!-- 数据库和缓存 -->
        <mongo-java-driver.version>3.10.1</mongo-java-driver.version>
        <jedis.version>3.0.1</jedis.version>


        <slf4j.version>1.7.25</slf4j.version>
        <logback.version>1.2.3</logback.version>

        <junit.version>4.12</junit.version>

        <!-- java版本和文件编码 -->
        <java.version>11</java.version>
        <file.encoding>UTF-8</file.encoding>

        <!-- maven核心插件 -->
        <maven-clean-plugin.version>3.1.0</maven-clean-plugin.version>
        <maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>
        <maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>
        <maven-surefire-plugin.version>3.0.0-M3</maven-surefire-plugin.version>
        <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
        <maven-shade-plugin.version>3.2.1</maven-shade-plugin.version>
        <versions-maven-plugin.version>2.7</versions-maven-plugin.version>

        <!-- maven自定义plugin插件 -->
        <maven-plugin-api.version>3.6.0</maven-plugin-api.version>
        <maven-plugin-annotations.version>3.6.0</maven-plugin-annotations.version>

        <!-- site中project-info信息输出插件和javadoc文档输出插件 -->
        <maven-site-plugin.version>3.7.1</maven-site-plugin.version>
        <maven-project-info-reports-plugin.version>3.0.0</maven-project-info-reports-plugin.version>
        <maven-javadoc-plugin.version>3.0.1</maven-javadoc-plugin.version>
        <!-- site中project-info和javadoc输出格式配置 -->
        <dependency.locations.enabled>false</dependency.locations.enabled>
        <project.build.sourceEncoding>${file.encoding}</project.build.sourceEncoding>
        <project.reporting.outputEncoding>${file.encoding}</project.reporting.outputEncoding>
    </properties>


    <dependencies>


    </dependencies>

    <build>
        <!--<finalName>${project.artifactId}</finalName>-->
        <sourceDirectory>src/main/java</sourceDirectory>
        <testSourceDirectory>src/test/java</testSourceDirectory>

        <!--使代码路径的非java文件也可以打入jar包，特别注意：maven-resources-plugin这个插件和这个标签的功能类似-->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.*</include>
                </includes>
            </resource>
        </resources>

        <plugins>

            <!-- 清理插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>${maven-clean-plugin.version}</version>
            </plugin>

            <!-- 为了使项目结构更为清晰，Maven区别对待Java代码文件和资源文件，maven-compiler-plugin用来编译Java代码，maven-resources-plugin则用来处理资源文件。-->

            <!-- 编译插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${file.encoding}</encoding>
                </configuration>
            </plugin>


            <!-- resource资源管理插件 -->

            <!-- 默认的主资源文件目录是src/main/resources，很多用户会需要添加额外的资源文件目录，这个时候就可以通过配置maven-resources-plugin来实现。
            资源文件过滤也是Maven的一大特性，你可以在资源文件中使用${propertyName}形式的Maven属性，然后配置maven-resources-plugin开启对资源文件的过滤，
            之后就可以针对不同环境通过命令行或者Profile传入属性的值，以实现更为灵活的构建。-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-resources-plugin.version}</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <!-- package阶段就执行resources插件的copy-resources目标 -->
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <encoding>${file.encoding}</encoding>
                            <!-- 指定resources插件处理资源文件到哪个目录下 -->
                            <outputDirectory>${project.build.directory}/resource</outputDirectory>
                            <!-- 也可以用下面这样的方式（指定相对url的方式指定outputDirectory） <outputDirectory>target/classes</outputDirectory> -->
                            <resources>
                                <resource>
                                    <!-- 指定resources插件处理哪个目录下的资源文件 -->
                                    <directory>src/main/resources/</directory>
                                    <!-- 指定不需要处理的资源 <excludes> <exclude>WEB-INF/*.*</exclude> </excludes> -->
                                    <!-- 是否对待处理的资源开启过滤模式 (resources插件的copy-resources目标也有资源过滤的功能，这里配置的
                                    这个功能的效果跟<build><resources><resource>下配置的资源过滤是一样的，只不过可能执行的阶段不一样，
                                    这里执行的阶段是插件指定的validate阶段，<build><resources><resource>下的配置将是在resources插件的resources目标执行时起作用（在process-resources阶段）) -->
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <!-- 测试插件 -->
            <!-- forkMode 可设置值有 “never”， “once”， “always” 和 “pertest”。
            once：在一个进程中进行所有测试。once为默认设置，在Hudson上持续回归时建议使用默认设置。
            pretest： 每一个测试创建一个新进程，为每个测试创建新的JVM是单独测试的最彻底方式，但也是最慢的，不适合hudson上持续回归。
            always：在一个进程中并行的运行脚本，Junit4.7以上版本才可以使用，surefire的版本要在2.6以上提供这个功能
            threadCount：执行时，指定可分配的线程数量。 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <forkMode>once</forkMode>
                    <threadCount>10</threadCount>
                    <argLine>-Dfile.encoding=${file.encoding}</argLine><!--argLine传入JVM选项-->
                    <!--<skipTests>true</skipTests>-->
                </configuration>
            </plugin>


            <!-- 打包插件-->
            <!--在target目录下会生成两个jar包，一个是包含了所有依赖的jar文件，所以可以直接运行；另一个original-xxx.jar文件，而是另外一个，生成的jar文件包含了所有依赖，所以可以直接运行。
            如果项目中用到了Spring Framework，将依赖打到一个jar包中，运行时会出现读取XML schema文件出错。原因是Spring Framework的多个jar包中包含相同的文件spring.handlers和spring.schemas，
            如果生成一个jar包会互相覆盖。为了避免互相影响，可以使用AppendingTransformer来对文件内容追加合并 -->
            <!--<plugin>-->
            <!--<groupId>org.apache.maven.plugins</groupId>-->
            <!--<artifactId>maven-shade-plugin</artifactId>-->
            <!--<version>${maven-shade-plugin.version}</version>-->
                <!--<executions>-->
                <!--<execution>-->
                <!--<phase>package</phase>-->
                <!--<goals>-->
                <!--<goal>shade</goal>-->
                <!--</goals>-->
                <!--<configuration>-->
                <!--<createDependencyReducedPom>false</createDependencyReducedPom>-->
                <!--</configuration>-->
                <!--</execution>-->
                <!--</executions>-->
                <!--<configuration>-->
                <!--<transformers>-->
                <!--<transformer-->
                <!--implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">-->
                <!--&lt;!&ndash;<mainClass>com.xxg.Main</mainClass>&ndash;&gt;-->
                <!--</transformer>-->
                <!--<transformer-->
                <!--implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">-->
                <!--<resource>META-INF/spring.handlers</resource>-->
                <!--</transformer>-->
                <!--<transformer-->
                <!--implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">-->
                <!--<resource>META-INF/spring.schemas</resource>-->
                <!--</transformer>-->
                <!--</transformers>-->
                <!--</configuration>-->
            <!--</plugin>-->

            <!-- 在执行site生成站点信息的时候会调用这个插件，会自动调用project-info-reports和javadoc两个插件 -->
            <!-- 在Settings，Build，Build Tools，Maven，Runner中配置VM Options中添加-Dfile.encoding=GBK,否则会乱码 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>${maven-site-plugin.version}</version>
            </plugin>

            <!--mvn versions:display-plugin-updates，查看最新的插件包-->
            <!--mvn versions:display-dependency-updates，查看最新的依赖包-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${versions-maven-plugin.version}</version>
                <configuration>
                    <generateBackupPoms>false</generateBackupPoms>
                </configuration>
            </plugin>


        </plugins>
    </build>


    <!-- 用于生成javadoc文档，测试报告等等 -->
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${maven-project-info-reports-plugin.version}</version>
            </plugin>

            <!--必须设置环境变量：JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8 -Dfile.decoding=UTF-8-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${maven-javadoc-plugin.version}</version>
                <configuration>
                    <encoding>${file.encoding}</encoding>
                    <docencoding>${file.encoding}</docencoding>
                    <charset>${file.encoding}</charset>
                </configuration>
            </plugin>
        </plugins>
    </reporting>
</project>
