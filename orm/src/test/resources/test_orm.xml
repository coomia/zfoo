<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:orm="http://www.zfoo.com/schema/orm"

       xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd

    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd

    http://www.zfoo.com/schema/orm
    http://www.zfoo.com/schema/orm-1.0.xsd">


    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!-- 为bean提供close方法关闭数据源，以便Spring容器关闭时，数据源能够正常关闭 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 将连接返回给调用者之前，用次sql验证从连接池取出的连接是否可用，一般设置成：select 1 -->
        <property name="validationQuery" value="select 1"/>
        <!-- 空闲连接回收线程运行的周期,以毫秒为单位. -->
        <property name="timeBetweenEvictionRunsMillis" value="5000"/>
        <!-- 空闲连接回收线程每次检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="10"/>
        <!-- 指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个 -->
        <property name="testOnBorrow" value="true"/>
        <!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除 -->
        <!-- 如果每次连接都检测有效性，那么在高并发的环境下会带来性能的问题 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 连接池初始化时创建的连接数量 -->
        <property name="initialSize" value="10"/>
        <!-- 最大连接数量 -->
        <property name="maxActive" value="50"/>
        <!-- 连接池中容许保持空闲状态的最大连接数量,超过的空闲连接将被释放,如果设置为负数表示不限制 -->
        <property name="maxIdle" value="5"/>
        <property name="minIdle" value="1"/>
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="com.zfoo.orm"/>
        <!--<property name="packagesToScan" value="com.zfoo.orm**.entity"/> 扫描全部entity包下的entity-->
        <property name="hibernateProperties">
            <props>
                <!-- 可以让我们在某一个上下文环境(比如说当前线程)中可以通过SessionFactory.getCurrentSession()得到同一个session会话 -->
                <prop key="current_session_context_class">thread</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <!--hibernate.dialect 只是Hibernate使用的数据库方言,就是要用Hibernate连接那种类型的数据库服务器。-->
                <!--<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop> 对应default-storage-engine=INNODB-->
                <!--<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop> 对应default-storage-engine=MyISAM-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <!--最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构 -->
                <!--以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行 -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!--是否在后台显示Hibernate用到的SQL语句，开发时设置为true，便于查错。项目部署后可以设置为false，提高运行效率-->
                <prop key="hibernate.show_sql">true</prop>
                <!--<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>-->
            </props>
        </property>
    </bean>


    <orm:orm id="orm" session="sessionFactory">
        <orm:caches>
            <orm:cache name="ten" size="10"/>
            <orm:cache name="hundred" size="100"/>
            <orm:cache name="thousand" size="1000"/>
            <orm:cache name="threeThousand" size="3000"/>
            <orm:cache name="tenThousand" size="10000"/>
        </orm:caches>
        <orm:persisters>
            <orm:persister name="default" type="time" config="0,30 * * * * ?"/>
            <orm:persister name="0s" type="queue" config="-1:1000"/>
            <orm:persister name="3s" type="time" config="0/3 * * * * ?"/>
            <orm:persister name="30s" type="time" config="0/30 * * * * ?"/>
            <orm:persister name="1m" type="time" config="0 0/30 * * * ?"/>
        </orm:persisters>
        <orm:entities>
            <orm:entity-package>com.zfoo.orm.**.entity</orm:entity-package>
        </orm:entities>
    </orm:orm>

    <context:component-scan base-package="com.zfoo.orm"/>

    <!--<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">-->
        <!--<property name="sessionFactory" ref="sessionFactory"/>-->
    <!--</bean>-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->

</beans>